name: Build

on:
  schedule:
    - cron: "0 3 1 * *"
  workflow_dispatch:

jobs:
  build:
    permissions:
      contents: write
      actions: write
    strategy:
      matrix:
        compiler: [gcc, clang]
        include:
          - compiler: gcc
            cc: gcc
            cxx: g++
          - compiler: clang
            cc: clang
            cxx: clang++
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          repository: tdlib/telegram-bot-api
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y make git zlib1g-dev libssl-dev gperf cmake g++ clang

      - name: Configure build
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
        run: |
          rm -rf build
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..

      - name: Build
        working-directory: build
        run: cmake --build .

      - name: Create Release Asset
        run: |
          cd build
          tar czf telegram-bot-api-${{ matrix.compiler }}.tar.gz telegram-bot-api

      - name: Generate release date
        id: date
        run: echo "date=$(date +'%F')" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.date.outputs.date }}
          tag_name: build-${{ steps.date.outputs.date }}
          files: build/telegram-bot-api-${{ matrix.compiler }}.tar.gz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README with latest release
        if: matrix.compiler == 'gcc'
        run: |
          # Create download section with latest links
          cat > README.md << 'EOF'
          # Telegram Bot API Server

          This repository contains automated builds for the [official Telegram Bot API server](https://github.com/tdlib/telegram-bot-api).

          ## Latest Release

          **Release Date:** ${{ steps.date.outputs.date }}

          ### Download Links
          - [GCC Build](../../releases/download/build-${{ steps.date.outputs.date }}/telegram-bot-api-gcc.tar.gz)
          - [Clang Build](../../releases/download/build-${{ steps.date.outputs.date }}/telegram-bot-api-clang.tar.gz)

          ## Automated Builds

          The builds are automatically generated on the first day of each month at 03:00 UTC using GitHub Actions. Each release includes:

          - GCC build (`telegram-bot-api-gcc.tar.gz`)
          - Clang build (`telegram-bot-api-clang.tar.gz`)

          ### Build Configuration

          - Build type: Release
          - Platform: Ubuntu Latest
          - Compilers:
            - GCC (g++)
            - Clang

          ### How to Download

          1. Go to the [Releases](../../releases) page
          2. Download the desired compiler variant
          3. Extract the archive:
             ```bash
             tar xzf telegram-bot-api-[compiler].tar.gz
             ```

          ### Manual Build Trigger

          The build workflow can also be triggered manually through GitHub Actions if needed.
          EOF

          # Commit and push the updated README
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add README.md
          git commit -m "Update README.md with latest release links (${{ steps.date.outputs.date }})"
          git push
